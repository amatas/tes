name: Build

on:
  issue_comment:
    types: [created, edited]

jobs:
  build:
    name: Build
    if: contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, 'build')
    runs-on: ubuntu-latest
    steps:
      - name: Setup builder
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.reactions.createForIssueComment({
              comment_id: context.payload.comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: 'rocket'
            })
      - name: get branch data
        id: branchdata
        run: |
          echo "::set-output name=branchname::$(curl -v -H "Accept: application/vnd.github.sailor-v-preview+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }} | jq '.head.ref' | sed 's/\"//g')"
          echo "::set-output name=sha::$(curl -v -H "Accept: application/vnd.github.sailor-v-preview+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }} | jq '.head.sha' | sed 's/\"//g')"
      - name: echo pullrequest branch
        run: |
          echo ${{ steps.branchdata.outputs.branchname }}
          echo ${{ steps.branchdata.outputs.sha }}
      - name: Checkout upstream repo
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.branchdata.outputs.branchname }}
      - name: Build and tag Docker image
        env:
          SHA: ${{ steps.branchdata.outputs.sha }}
        run: |
          docker build --file Dockerfile \
            --tag amatas:${SHA::8} \
            --tag amatas:latest .
      - name: Add commit comment
        env:
          SHA: ${{ steps.branchdata.outputs.sha }}
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            var msg = "```\n \"image\" = \"amatas\"\n \"tag\"   = \"" + process.env.SHA.substr(0,7) + "\"\n```"

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: msg
            })
